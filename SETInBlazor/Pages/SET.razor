@page "/set"

@using SETLogicLibrary.Models
@using SETLogicLibrary.Interfaces
@using SETInBlazor.Services.Interfaces
@using SETInBlazor.Models
@using AutoMapper

@inject ICardHelperService _cardHelperService
@inject IUiHelperService _uiHelperService
@inject IMapper _mapper

@if (uniqueCardCombinations == null)
{
    <div>Loading....</div>
}
else
{
    <div class="cardsContainer">
        @for (int i = 0; i < numberOfCardsVisible; i++)
        {
            <div class="card @lineClass" @onclick="() => ChangeBackGroundColor(uniqueCardCombinations[i])">
                @for (int j = 0; j < uniqueCardCombinations[i].Count; j++)
                {
                    <div class="@uniqueCardCombinations[i].Shape @uniqueCardCombinations[i].Color @uniqueCardCombinations[i].Border"></div>
                }
            </div>
        }
    </div>
}

@code {
    private int numberOfCardsVisible = 12;
    private List<SetCardUiModel> uniqueCardCombinations;
    private string lineClass;
    private int numberOfSelected = 0;

    protected override void OnInitialized()
    {
        uniqueCardCombinations = _mapper.Map<List<SetCard>, List<SetCardUiModel>>(_cardHelperService.CreateAllUniqueCombinations());
        lineClass = _uiHelperService.GetLineClass(numberOfCardsVisible);

    }

    private void ChangeBackGroundColor(SetCardUiModel setCard)
    {
        
    }

}
